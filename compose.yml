name: telegram_bot

services:

  bot:
    build: ./telegram_bot
    container_name: aiogram-bot
    restart: unless-stopped
    env_file:
      - .env  # Load environment variables from the .env file
    depends_on:
      - redis
      - postgres
    networks:
      - app_network

  postgres:
    image: postgres:17.2
    container_name: postgres_container
    env_file:
      - .env
    environment:
      PGDATA: "/var/lib/postgresql/data/pgdata"
      TZ: Europe/Moscow # Устанавливаем часовой пояс на уровне контейнера
    volumes:
      - postgres-data:/var/lib/postgresql/data
    # ports:
    #   - "5431:5432"
    deploy:
      resources:
        limits:
          memory: 1G # Лимит на память 
          cpus: "0.8"  # Лимит на использование CPU 
    command: >
      postgres -c timezone='Europe/Moscow'
    healthcheck:
      test: ["CMD-SHELL", 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    networks:
      - app_network

  pgadmin:
    container_name: pgadmin_container
    image: dpage/pgadmin4:8.14
    env_file:
      - .env
    environment:
      TZ: Europe/Moscow
      PGADMIN_CONFIG_SERVER_MODE: "False"
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    ports:
      - "5050:80"
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.4'
          memory: 512M
    networks:
      - app_network

  redis: # redis-cli -h localhost -p 6380
    image: redis:7.4
    container_name: redis_container
    environment:
      - TZ=Europe/Moscow
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_USER=${REDIS_USER}
      - REDIS_USER_PASSWORD=${REDIS_USER_PASSWORD}
    # ports: # Не нужно прокидывать порт наружу контейнера
    #   - "6380:6379" 
    volumes:
      - redis-data:/var/lib/redis/data
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    command: >
      sh -c '
        mkdir -p /usr/local/etc/redis &&
        echo "bind 0.0.0.0" > /usr/local/etc/redis/redis.conf &&
        echo "requirepass $REDIS_PASSWORD" >> /usr/local/etc/redis/redis.conf &&
        echo "appendonly yes" >> /usr/local/etc/redis/redis.conf &&
        echo "appendfsync everysec" >> /usr/local/etc/redis/redis.conf &&
        echo "user default on nopass ~* +@all" > /usr/local/etc/redis/users.acl &&
        echo "user $REDIS_USER on >$REDIS_USER_PASSWORD ~* +@all" >> /usr/local/etc/redis/users.acl &&
        redis-server /usr/local/etc/redis/redis.conf --aclfile /usr/local/etc/redis/users.acl
      '
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "$REDIS_PASSWORD", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    tty: true
    stdin_open: true
    networks:
      - app_network

  prometheus:
    image: prom/prometheus:v3.1.0
    container_name: prometheus
    # hostname: prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus  # Хранилище данных Prometheus
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 256M
    restart: unless-stopped
    networks:
      - app_network

  grafana:
    image: grafana/grafana:11.5.0
    container_name: grafana
    volumes:
      - ./grafana/dashboards:/var/lib/grafana/dashboards # Монтируем папку с дашбордами
      - ./grafana/dashboards.yaml:/etc/grafana/provisioning/dashboards/main.yaml  # Монтируем provisioning
      - ./grafana/datasources.yaml:/etc/grafana/provisioning/datasources/datasource.yaml
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
    deploy:
      resources:
        limits:
          cpus: '0.30'
          memory: 256M
    networks:
      - app_network
    restart: unless-stopped
    

volumes:
  postgres-data:
  pgadmin-data:
  redis-data:
  prometheus_data:
  grafana_data:

networks:
  app_network:
    driver: bridge
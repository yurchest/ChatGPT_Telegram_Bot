name: Deploy to Server

on:
  push:
    branches:
      - prod
  pull_request:
    branches:
      - prod  # Проверки при PR в prod

jobs:
  test:
      name: Run Tests
      runs-on: ubuntu-latest
      steps:
        - name: Checkout
          uses: actions/checkout@v4

        - name: Run Linter & Tests
          run: |
            pip install -r requirements.txt
            # TODO
            # pytest


  deploy:
    name: Deploy to VPS
    needs: test
    if: github.event_name == 'push'  # Деплой только на push в prod!
    runs-on: ubuntu-latest

    steps:
      - name: Deploy via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST  }}
          username: ${{ secrets.SSH_USER  }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            set -e  # Остановка при ошибке
            cd /root/ChatGPT_Telegram_Bot
            git checkout prod
            git pull origin prod
            docker compose down
            docker compose build
            docker compose up -d
    
  rollback:
    name: Rollback to last stable version
    if: failure()  # Запускаем откат, если deploy упал
    runs-on: ubuntu-latest
    needs: deploy  # Ждем завершения deploy

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get last 2 release tags
        id: get_tags
        run: |
          # Получаем два последних релиза
          cd /root/ChatGPT_Telegram_Bot
          git checkout prod
          TAGS=($(git tag --sort=-creatordate | head -2))
          echo "LATEST_TAG=${TAGS[0]}" >> $GITHUB_ENV
          echo "PREV_TAG=${TAGS[1]}" >> $GITHUB_ENV

      - name: Revert to previous release
        run: |
          cd /root/ChatGPT_Telegram_Bot
          git checkout prod
          git revert -m 1 --no-edit HEAD
          git commit --amend -m "Release $PREV_TAG (Revert $LATEST_TAG) [skip ci]"
          git push origin prod

      - name: Restart Docker Compose on Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST  }}
          username: ${{ secrets.SSH_USER  }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            set -e  # Остановка при ошибке
            cd /root/ChatGPT_Telegram_Bot
            git checkout prod

            echo "Pulling latest stable commit from prod"
            git pull origin prod  # Обновляем код после отката

            echo "Stopping running containers"
            docker compose down

            echo "Rebuilding and restarting services"
            docker compose build  # Пересобираем (если Dockerfile изменился)
            docker compose up -d   # Запускаем заново
      
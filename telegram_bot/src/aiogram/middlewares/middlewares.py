import asyncio
import traceback
from datetime import datetime

from aiogram import BaseMiddleware, Bot
from aiogram.types import (
    Update,
    TelegramObject,
    Message,
    )
from aiogram.enums import ParseMode

from src.database import Database
from src.gpt import OpenAI_API
from src.database import Redis
from src.config import SUBSCRIPTION_DURATION_MONTHS, TRIAL_PERIOD_NUM_REQ, MAX_HISTORY_LENGTH
from src.aiogram.handlers.system import get_payment_keyboard_markup
from src.prometheus_metrics import MESSAGE_RESPONSE_TIME, MESSAGE_RPS_COUNTER
from src.aiogram.utils import commands_text

from src.logger import logger


class ErrorLoggingMiddleware(BaseMiddleware):
    def __init__(self, bot: Bot, db: Database, redis: Redis):
        self.bot = bot
        self.db = db
        self.redis = redis

    async def __call__(self, handler, event: Update, data: dict):
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            return await handler(event, data)
        except Exception as exception:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            telegram_id = None
            if event.message:
                telegram_id = event.message.from_user.id
            elif event.callback_query:
                telegram_id = event.callback_query.from_user.id

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
            tb = traceback.extract_tb(exception.__traceback__)
            filepath, lineno, func_name, line = tb[-1]

            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            logger.error(
                f"Global error occurred\n{filepath}\nFunc name: {func_name}\n{exception.__class__.__name__} | {exception}",
                exc_info=False
            )

            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            await self.db.add_error(
                error_type=str(exception.__class__.__name__),
                error_text=str(exception),
                file_path=filepath,
                telegram_id=telegram_id,
                traceback=traceback.format_exc()
            )

            # –£–¥–∞–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–µ—Å—Å–∏–∏ –∏–∑ Redis
            if telegram_id:
                await self.redis.clear_user_history(telegram_id)
                await self.redis.set_user_req_inactive(telegram_id)

                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await self.bot.send_message(
                    chat_id=telegram_id,
                    text=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞\n–°–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º (@yurchest)\nError: {exception}"
                )

            # –ë–ª–æ–∫–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            # raise exception

class TimingMessageMiddleware(BaseMiddleware):
    async def __call__(self, handler, event: TelegramObject, data: dict):
        """
        –ó–∞–º–µ—Ä—è–µ–º MESSAGE_RESPONSE_TIME
        """
        start_time = datetime.now()  # –§–∏–∫—Å–∏—Ä—É–µ–º –º–æ–º–µ–Ω—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–æ–º

        result =  await handler(event, data)
        
        if isinstance(event, Message):
            # –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
            response_time = (datetime.now() - start_time).total_seconds() 
            # –í—Ä–µ–º—è –æ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–æ –Ω–∞—á–∞–ª–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–∏–∫–∏
            message_latency: datetime = (start_time - event.date.replace(tzinfo=None)).total_seconds()  
            # –û–±—â–µ–µ –≤—Ä–µ–º—è –æ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ –æ—Ç–≤–µ—Ç–∞ 
            total_latency = message_latency + response_time  
            # –õ–æ–≥–∏—Ä—É–µ–º
            logger.debug(f"(MAIN)\t\t Telegram latency: {message_latency:.3f}s, Bot processing: {response_time:.3f}s, Total: {total_latency:.3f}s")
            # –ü–∏—à–µ–º –≤ Prometheus
            MESSAGE_RESPONSE_TIME.observe(total_latency) # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Prometheus
        
        return result

        

class DatabaseMiddleware(BaseMiddleware):
    def __init__(self, db: Database):
        super().__init__()
        self.db = db

    async def __call__(self, handler, event: TelegramObject, data: dict):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –æ–±—ä–µ–∫—Ç `db` –≤ `data`, —á—Ç–æ–±—ã –æ–Ω –±—ã–ª –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Ö–µ–Ω–¥–ª–µ—Ä–∞—Ö.
        """
        data["db"] = self.db
        return await handler(event, data)
    
class OpenAIMiddleware(BaseMiddleware):
    def __init__(self, openai: OpenAI_API):
        super().__init__()
        self.openai = openai

    async def __call__(self, handler, event: TelegramObject, data: dict):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –æ–±—ä–µ–∫—Ç `openai` –≤ `data`, —á—Ç–æ–±—ã –æ–Ω –±—ã–ª –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Ö–µ–Ω–¥–ª–µ—Ä–∞—Ö.
        """
        data["openai"] = self.openai
        return await handler(event, data)
    
class RedisMiddleware(BaseMiddleware):
    def __init__(self, redis: Redis):
        super().__init__()
        self.redis = redis

    async def __call__(self, handler, event: TelegramObject, data: dict):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –æ–±—ä–µ–∫—Ç `redis` –≤ `data`, —á—Ç–æ–±—ã –æ–Ω –±—ã–ª –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Ö–µ–Ω–¥–ª–µ—Ä–∞—Ö.
        """
        data["redis"] = self.redis
        return await handler(event, data)
    
    
class CheckNewUserMiddleware(BaseMiddleware):
    async def __call__(self, handler, event: TelegramObject, data: dict):
        if isinstance(event, Message):
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            db:Database= data.get("db")
            
            if db is None:
                raise ValueError("Database instance must be provided in the context data.")
        
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            is_user_exists = await db.is_user_exists(event.from_user.id)

            if not is_user_exists:
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                text = "\n".join([
                    f"*–ü—Ä–∏–≤–µ—Ç, {event.from_user.first_name}\\! üëã*",
                    "",
                    "–Ø \\- *Yurchest ChatGPT Bot*, —É–º–Ω—ã–π —á–∞—Ç\\-–±–æ—Ç –Ω–∞ –±–∞–∑–µ OpenAI GPT\\.",
                    "–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å –ª—é–±—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏: –æ—Ç –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è\\!\n",
                    "üîπ *–ö–∞–∫ —è –º–æ–≥—É –ø–æ–º–æ—á—å?*",
                    "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –¥–∞—Ç—å –ª—É—á—à–∏–π –æ—Ç–≤–µ—Ç\\!\n",
                    "üîπ *–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥*",
                    f"–¢—ã –º–æ–∂–µ—à—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –≤ —Ç–µ—á–µ–Ω–∏–µ *{TRIAL_PERIOD_NUM_REQ} –∑–∞–ø—Ä–æ—Å–æ–≤*\\.",
                    f"–ü–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ —Ç–µ–±–µ –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ *{SUBSCRIPTION_DURATION_MONTHS} –º–µ—Å—è—Ü\\(–µ–≤\\)*\\.\n",
                    *commands_text,
                    "–ù–∞—á–Ω–µ–º? üòäüöÄ"
                ])
                                
                await event.answer(text, parse_mode=ParseMode.MARKDOWN_V2)

                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                await db.add_user(
                    telegram_id=event.from_user.id,
                    first_name=event.from_user.first_name,
                    username=event.from_user.username,
                    language_code=event.from_user.language_code
                )
            
        # –í—ã–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        return await handler(event, data)

class IncrementRequestsMiddleware(BaseMiddleware):
    async def __call__(self, handler, event: TelegramObject, data: dict):
        result = await handler(event, data)
        if isinstance(event, Message):
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            db = data.get("db")
            
            if db is None:
                raise ValueError("Database instance must be provided in the context data.")
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await db.increment_user_requests(event.from_user.id)
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            await db.update_last_req_date(event.from_user.id)
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Prometheus
            MESSAGE_RPS_COUNTER.inc()

        # –í—ã–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        return result
    
class CheckTrialPeriodMiddleware(BaseMiddleware):
    """
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –∏ —Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–¥–ø–∏—Å–∫–µ.
    """
    async def __call__(self, handler, event: TelegramObject, data: dict):
        if isinstance(event, Message):
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            db: Database = data.get("db")
            redis: Redis = data.get("redis")
            
            if db is None:
                raise ValueError("Database instance must be provided in the context data.")
            if redis is None:
                raise ValueError("Redis instance must be provided in the context data.")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            is_subscription_active = await db.is_subscription_active(event.from_user.id)

            if not is_subscription_active and not await db.is_user_trial(event.from_user.id):
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –∏ —Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–¥–ø–∏—Å–∫–µ
                await event.answer(
                    f"–í–∞—à –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ ({TRIAL_PERIOD_NUM_REQ} –∑–∞–ø—Ä–æ—Å–æ–≤) –∑–∞–∫–æ–Ω—á–∏–ª—Å—è. "
                    "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å.",
                    reply_markup=get_payment_keyboard_markup()
                )
                # –£–¥–∞–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
                # await redis.clear_user_history(event.from_user.id)

            else:
                return await handler(event, data)
        else:
            return await handler(event, data)

class CheckSubscriptionMiddleware(BaseMiddleware):
    """
    –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω –∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏.
    """
    async def __call__(self, handler, event: TelegramObject, data: dict):
        if isinstance(event, Message):
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            db: Database = data.get("db")
            redis: Redis = data.get("redis")
            
            if db is None:
                raise ValueError("Database instance must be provided in the context data.")
            if redis is None:
                raise ValueError("Redis instance must be provided in the context data.")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            is_subscription_active = await db.is_subscription_active(event.from_user.id)

            if not is_subscription_active and not await db.is_user_trial(event.from_user.id):
                # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –ò –Ω–µ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
        
                await event.answer(
                    f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å. \n"
                    f"–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É",
                    reply_markup=get_payment_keyboard_markup()
                )
                # –£–¥–∞–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
                await redis.clear_user_history(event.from_user.id)

            else:
                return await handler(event, data)
        else:
            return await handler(event, data)

    
class WaitingMiddleware(BaseMiddleware):
    """
    –ï—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—â–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —ç—Ç–æ–º.
    –ò–Ω–∞—á–µ –≤—ã–≤–æ–¥–∏–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - —Ç–æ—á–∫–∏.
    –í –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (Redis).
    –ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —É–¥–∞–ª—è—é—Ç—Å—è.
    """
    async def delete_message_when_inactive(
            self, redis: Redis, 
            user_id: int,
            tech_message: TelegramObject, 
            user_message: TelegramObject = None
            ):
        """
        –û–∂–∏–¥–∞–µ—Ç, –ø–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∂–¥–µ—Ç –æ—Ç–≤–µ—Ç–∞.
        """
        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if user_message: await user_message.delete()

        while await redis.is_user_waiting(user_id):
            # –û–∂–∏–¥–∞–µ–º –ø–æ–∫–∞ —é–∑–µ—Ä—É –æ—Ç–≤–µ—Ç–∏—Ç –±–æ—Ç –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await asyncio.sleep(0.1)

        # –£–¥–∞–ª—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await tech_message.delete()
        


    async def delete_message_when_active(self, redis: Redis, 
                                           user_id: int, 
                                           tech_message: TelegramObject):
        """
        –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–Ω–æ–≤–∞ —á—Ç–æ-—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç
        """
        while not await redis.is_user_waiting(user_id):
            await asyncio.sleep(0.5)

        await tech_message.delete()
        

    async def __call__(self, handler, event: TelegramObject, data: dict):
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        redis: Redis = data.get("redis")

        if redis is None:
            raise ValueError("Redis instance must be provided in the context data.")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        is_user_waiting = await redis.is_user_waiting(event.from_user.id)

        tech_message = None  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

        if is_user_waiting:
            # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è
            tech_message = await event.answer("–í–∞—à –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
            asyncio.create_task(self.delete_message_when_inactive(redis, event.from_user.id, tech_message, event))
            return  # –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –∑–∞–ø—Ä–æ—Å —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–æ—á–∫–∞–º–∏
        tech_message = await event.answer(". . . . . .")
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await redis.set_user_req_active(event.from_user.id)
        # –û–∂–∏–¥–∞–µ–º –∫–æ–≥–¥–∞ –∑–∞–ø—Ä–æ—Å —Å—Ç–∞–Ω–µ—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º
        asyncio.create_task(self.delete_message_when_inactive(redis, event.from_user.id, tech_message))
        # –í—ã–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        result = await handler(event, data)
        # –£–¥–∞–ª—è–µ–º —Ñ–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await redis.set_user_req_inactive(event.from_user.id)

        history: list[dict] = await redis.get_history(event.from_user.id)

        if len(history) / 2 == MAX_HISTORY_LENGTH - 5:
            # –ù–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞, —á—Ç–æ –æ—Å—Ç–∞–ª–æ—Å—å 5 —Å–æ–æ–±—â–µ–Ω–∏–π
            tech_message = await event.answer(
                f"*üí¨ –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å 5/{MAX_HISTORY_LENGTH} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ —Å–±—Ä–æ—Å–∞ –¥–∏–∞–ª–æ–≥–∞\\.\\.\\.*\n\n"
                "üîπ */reset\\_conversation*, —á—Ç–æ–±—ã —Å–±—Ä–æ—Å–∏—Ç—å –¥–∏–∞–ª–æ–≥\\.\n"
                "üîπ –≠—Ç–æ —É—Å–∫–æ—Ä–∏—Ç –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –∏ —É–ª—É—á—à–∏—Ç –ø–æ–Ω–∏–º–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞\\. ‚è≥",
                parse_mode=ParseMode.MARKDOWN_V2
            )
            asyncio.create_task(self.delete_message_when_active(redis, event.from_user.id, tech_message))
            return result
        
        elif len(history) / 2 > MAX_HISTORY_LENGTH:
            # –ó–∞–∫–æ–Ω—á–∏–ª—Å—è –ª–∏–º–∏—Ç –∏—Å—Ç–æ—Ä–∏–∏
            tech_message = await event.answer(
                f"*üí¨ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∏—Å—Ç–æ—Ä–∏–∏ –≤ {MAX_HISTORY_LENGTH} —Å–æ–æ–±—â–µ–Ω–∏–π\\.*\n\n"
                "üîπ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É */reset\\_conversation*, —á—Ç–æ–±—ã —Å–±—Ä–æ—Å–∏—Ç—å –¥–∏–∞–ª–æ–≥ –∏ –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —á–∏—Ç–æ–≥–æ –ª–∏—Å—Ç–∞.\\.\n"
                "üîπ */help* \\- –ø–æ–º–æ—â—å\\.\n",
                parse_mode=ParseMode.MARKDOWN_V2
            )

        elif len(history) / 2 % 10 == 0 and len(history) / 2 != 0:
            # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∫—Ä–∞—Ç–Ω–æ 10 (–∫–∞–∂–¥—ã–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π)
            # –ù–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞, —á—Ç–æ –º–æ–∂–Ω–æ —Å–±—Ä–æ—Å–∏—Ç—å –¥–∏–∞–ª–æ–≥
            tech_message = await event.answer(
                "*üí¨ –í–∞—à –¥–∏–∞–ª–æ–≥ –∑–∞—Ç—è–Ω—É–ª—Å—è\\.\\.\\.*\n\n"
                "üîπ –ï—Å–ª–∏ —Å–º–µ–Ω–∏–ª–∏ —Ç–µ–º—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É */reset\\_conversation*, —á—Ç–æ–±—ã —Å–±—Ä–æ—Å–∏—Ç—å –¥–∏–∞–ª–æ–≥\\.\n"
                "üîπ –≠—Ç–æ —É—Å–∫–æ—Ä–∏—Ç –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –∏ —É–ª—É—á—à–∏—Ç –ø–æ–Ω–∏–º–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞\\. ‚è≥",
                parse_mode=ParseMode.MARKDOWN_V2
            )
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            asyncio.create_task(self.delete_message_when_active(redis, event.from_user.id, tech_message))
            return result

            



    

        

